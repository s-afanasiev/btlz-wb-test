//@ts-nocheck
import axios from 'axios';

class WildberriesAPI {
  constructor(apiToken) {
    this.apiToken = apiToken;
    this.baseURL = 'https://common-api.wildberries.ru';
    this.lastRequestTime = 0;
    this.rateLimitDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ª–∏–º–∏—Ç WB)
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
   */
  async waitForRateLimit() {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    
    if (timeSinceLastRequest < this.rateLimitDelay) {
      const waitTime = this.rateLimitDelay - timeSinceLastRequest;
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    this.lastRequestTime = Date.now();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–æ—Ä–æ–±–æ–≤ –æ—Ç WB API
   * @param {string} date - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
   */
  async fetchBoxTariffs(date = null) {
    if (!this.apiToken) {
      throw new Error('WB API token not configured');
    }

    await this.waitForRateLimit();

    try {
      console.log('üöÄ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –∫–æ—Ä–æ–±–æ–≤ –æ—Ç WB API...');
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const params = {};
      if (date) {
        params.date = date;
        console.log(`üìÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –¥–∞—Ç—É: ${date}`);
      }
      const response = await axios.get(`${this.baseURL}/api/v1/tariffs/box`, {
        params,
        headers: {
          'Authorization': this.apiToken, // WB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω, –Ω–µ Bearer
          'Content-Type': 'application/json',
          'User-Agent': 'WB-Tariffs-App/1.0.0'
        },
        timeout: 30000
      });
      /**
       * {
            boxDeliveryBase: '169,1',
            boxDeliveryCoefExpr: '445',
            boxDeliveryLiter: '42,28',
            boxDeliveryMarketplaceBase: '83,6',
            boxDeliveryMarketplaceCoefExpr: '220',
            boxDeliveryMarketplaceLiter: '20,9',
            boxStorageBase: '0,29',
            boxStorageCoefExpr: '415',
            boxStorageLiter: '0,29',
            geoName: '–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
            warehouseName: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'
        },
       */
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.response.data.warehouseList.length || 0} —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      return response.data.response.data.warehouseList;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:', error.message);
      
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
        console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
      }
      
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö API –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   * @param {Array} apiData - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
   * @returns {Array} –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  transformTariffData(apiData) {
    return apiData.map(tariff => ({
      warehouseName: tariff.warehouseName,
      boxDeliveryAndStorageExpr: tariff.boxDeliveryAndStorageExpr,
      boxDeliveryBase: tariff.boxDeliveryBase,
      boxDeliveryLiter: tariff.boxDeliveryLiter,
      boxStorageBase: tariff.boxStorageBase,
      boxStorageLiter: tariff.boxStorageLiter,
      boxReturnBase: tariff.boxReturnBase,
      boxReturnLiter: tariff.boxReturnLiter,
      coefficient: tariff.coefficient,
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      updatedAt: new Date().toISOString()
    }));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   * @param {string} date - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param {number} maxRetries - –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Ç–∞—Ä–∏—Ñ–æ–≤
   */
  async fetchBoxTariffsWithRetry(date = null, maxRetries = 3) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
        return await this.fetchBoxTariffs(date);
      } catch (error) {
        lastError = error;
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        
        if (attempt < maxRetries) {
          const backoffTime = attempt * 2000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${backoffTime/1000} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏...`);
          await new Promise(resolve => setTimeout(resolve, backoffTime));
        }
      }
    }
    
    throw lastError;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
   * @param {string} warehouseName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
   * @param {number} volumeInLiters - –û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –≤ –ª–∏—Ç—Ä–∞—Ö
   * @returns {Object} –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  calculateLogisticsCosts(tariffs, warehouseName, volumeInLiters = 1) {
    const tariff = tariffs.find(t => t.warehouseName === warehouseName);
    
    if (!tariff) {
      throw new Error(`–¢–∞—Ä–∏—Ñ –¥–ª—è —Å–∫–ª–∞–¥–∞ "${warehouseName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return {
      warehouse: warehouseName,
      volume: volumeInLiters,
      deliveryCost: tariff.boxDeliveryBase + (volumeInLiters * tariff.boxDeliveryLiter),
      storageCost: tariff.boxStorageBase + (volumeInLiters * tariff.boxStorageLiter),
      returnCost: tariff.boxReturnBase + (volumeInLiters * tariff.boxReturnLiter),
      expressCost: tariff.boxDeliveryAndStorageExpr,
      coefficient: tariff.coefficient,
      totalBasicCost: function() {
        return this.deliveryCost + this.storageCost;
      }
    };
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function main() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
  const token = process.env.WB_API_TOKEN;
  const wbAPI = new WildberriesAPI(token);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    const tariffs = await wbAPI.fetchBoxTariffsWithRetry();
    
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–∫–ª–∞–¥–æ–≤:');
    tariffs.forEach(tariff => {
      console.log(`- ${tariff.warehouseName}: –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç ${tariff.boxDeliveryBase}‚ÇΩ`);
    });

    // –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
    console.log('\nüí∞ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –æ–±—ä—ë–º–æ–º 2 –ª–∏—Ç—Ä–∞:');
    const costs = wbAPI.calculateLogisticsCosts(tariffs, '–ú–æ—Å–∫–≤–∞', 2);
    console.log(`–°–∫–ª–∞–¥: ${costs.warehouse}`);
    console.log(`–î–æ—Å—Ç–∞–≤–∫–∞: ${costs.deliveryCost}‚ÇΩ`);
    console.log(`–•—Ä–∞–Ω–µ–Ω–∏–µ: ${costs.storageCost}‚ÇΩ`);
    console.log(`–í–æ–∑–≤—Ä–∞—Ç: ${costs.returnCost}‚ÇΩ`);
    console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${costs.totalBasicCost()}‚ÇΩ`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function setupHourlyUpdates() {
  const wbAPI = new WildberriesAPI(process.env.WB_API_TOKEN);
  
  setInterval(async () => {
    console.log('\n‚è∞ –ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤...');
    try {
      const tariffs = await wbAPI.fetchBoxTariffsWithRetry();
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${tariffs.length} —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ ${new Date().toLocaleString()}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ—á–∞—Å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
    }
  }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default WildberriesAPI;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
// main();
// setupHourlyUpdates();